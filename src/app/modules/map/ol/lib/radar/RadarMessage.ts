/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: RadarMessage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class RadarMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        radar?: number;
        spoke?: RadarMessage.Spoke;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("radar" in data && data.radar != undefined) {
                this.radar = data.radar;
            }
            if ("spoke" in data && data.spoke != undefined) {
                this.spoke = data.spoke;
            }
        }
    }
    get radar() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set radar(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get spoke() {
        return pb_1.Message.getWrapperField(this, RadarMessage.Spoke, 2) as RadarMessage.Spoke;
    }
    set spoke(value: RadarMessage.Spoke) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_spoke() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        radar?: number;
        spoke?: ReturnType<typeof RadarMessage.Spoke.prototype.toObject>;
    }): RadarMessage {
        const message = new RadarMessage({});
        if (data.radar != null) {
            message.radar = data.radar;
        }
        if (data.spoke != null) {
            message.spoke = RadarMessage.Spoke.fromObject(data.spoke);
        }
        return message;
    }
    toObject() {
        const data: {
            radar?: number;
            spoke?: ReturnType<typeof RadarMessage.Spoke.prototype.toObject>;
        } = {};
        if (this.radar != null) {
            data.radar = this.radar;
        }
        if (this.spoke != null) {
            data.spoke = this.spoke.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.radar != 0)
            writer.writeUint32(1, this.radar);
        if (this.has_spoke)
            writer.writeMessage(2, this.spoke, () => this.spoke.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RadarMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RadarMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.radar = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.spoke, () => message.spoke = RadarMessage.Spoke.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RadarMessage {
        return RadarMessage.deserialize(bytes);
    }
}
export namespace RadarMessage {
    export class Spoke extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            angle?: number;
            bearing?: number;
            range?: number;
            time?: number;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("angle" in data && data.angle != undefined) {
                    this.angle = data.angle;
                }
                if ("bearing" in data && data.bearing != undefined) {
                    this.bearing = data.bearing;
                }
                if ("range" in data && data.range != undefined) {
                    this.range = data.range;
                }
                if ("time" in data && data.time != undefined) {
                    this.time = data.time;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get angle() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set angle(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get bearing() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set bearing(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get range() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set range(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            angle?: number;
            bearing?: number;
            range?: number;
            time?: number;
            data?: Uint8Array;
        }): Spoke {
            const message = new Spoke({});
            if (data.angle != null) {
                message.angle = data.angle;
            }
            if (data.bearing != null) {
                message.bearing = data.bearing;
            }
            if (data.range != null) {
                message.range = data.range;
            }
            if (data.time != null) {
                message.time = data.time;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                angle?: number;
                bearing?: number;
                range?: number;
                time?: number;
                data?: Uint8Array;
            } = {};
            if (this.angle != null) {
                data.angle = this.angle;
            }
            if (this.bearing != null) {
                data.bearing = this.bearing;
            }
            if (this.range != null) {
                data.range = this.range;
            }
            if (this.time != null) {
                data.time = this.time;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.angle != 0)
                writer.writeUint32(1, this.angle);
            if (this.bearing != 0)
                writer.writeUint32(2, this.bearing);
            if (this.range != 0)
                writer.writeUint32(3, this.range);
            if (this.time != 0)
                writer.writeUint64(4, this.time);
            if (this.data.length)
                writer.writeBytes(5, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Spoke {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Spoke();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.angle = reader.readUint32();
                        break;
                    case 2:
                        message.bearing = reader.readUint32();
                        break;
                    case 3:
                        message.range = reader.readUint32();
                        break;
                    case 4:
                        message.time = reader.readUint64();
                        break;
                    case 5:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Spoke {
            return Spoke.deserialize(bytes);
        }
    }
}
